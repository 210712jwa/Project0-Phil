package com.revature.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.revature.dto.AddOrEditAccountDTO;
import com.revature.model.Account;
import com.revature.model.Client;
import com.revature.util.ConnectionUtility;

public class AccountDAOImpl implements AccountDAO {

	@Override
	public List<Account> getAllAccounts() throws SQLException {

		List<Account> accounts = new ArrayList();

		try (Connection con = ConnectionUtility.getConnection()) {

			Statement stmt = con.createStatement();

			String sql = "SELECT * FROM project0.account";

			ResultSet rs = stmt.executeQuery(sql);

			while (rs.next()) {
				int accountId = rs.getInt("account_id");
				String accountType = rs.getString("account_type");
				int balance = rs.getInt("balance");
				int clientId = rs.getInt("client_id");
				Account account = new Account(accountId, accountType, balance, clientId);
				accounts.add(account);

			}

		}

		return accounts;
	}

	@Override
	public List<Account> getAllAccountsFromClient(int clientId) throws SQLException {

		try (Connection con = ConnectionUtility.getConnection()) {

			List<Account> accounts = new ArrayList();
			String sql = "SELECT * FROM project0.account a WHERE a.client_id = ?  ";

			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, clientId);

			ResultSet rs = pstmt.executeQuery();

			while (rs.next()) {
				int accountId = rs.getInt("account_id");
				String accountType = rs.getString("account_type");
				int balance = rs.getInt("balance");

				Account account = new Account(accountId, accountType, balance, clientId);
				accounts.add(account);

			}
			return accounts;
		}

	}

	@Override
	public Account addAccount(int clientId, AddOrEditAccountDTO accountToAdd) throws SQLException {
		try (Connection con = ConnectionUtility.getConnection()) {

			String sql = "INSERT INTO project0.account (account_type, balance, client_id) VALUES (?, ?, ?)";
			PreparedStatement pstmt = con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);

			pstmt.setString(1, accountToAdd.getAccountType());
			pstmt.setInt(2, accountToAdd.getBalance());
			pstmt.setInt(3, clientId);

			int recordsUpdated = pstmt.executeUpdate();

			if (recordsUpdated != 1) {
				throw new SQLException("Could not insert a account record");
			}
			ResultSet generatedKeys = pstmt.getGeneratedKeys();
			if (generatedKeys.next()) {
				Account createdAccount = new Account(generatedKeys.getInt(1), accountToAdd.getAccountType(),
						accountToAdd.getBalance(), accountToAdd.getClientId());
				return createdAccount;
			} else {
				throw new SQLException("Autogenerated id could not be obtained for account ");
			}
		}

	}

	@Override
	public List<Account> getAccountByIdAndClientId(int clientId, int accountId) throws SQLException {
		try (Connection con = ConnectionUtility.getConnection()) {

			List<Account> accounts = new ArrayList();
			String sql = "SELECT * FROM project0.account a WHERE a.client_id = ? AND a.account_id = ?";
			PreparedStatement pstmt = con.prepareStatement(sql);

			pstmt.setInt(1, clientId);
			pstmt.setInt(2, accountId);

			ResultSet rs = pstmt.executeQuery();

			while (rs.next()) {
				int accountId1 = rs.getInt("account_id");
				String accountType = rs.getString("account_type");
				int balance = rs.getInt("balance");
				int clientId1 = rs.getInt("client_id");

				Account account = new Account(accountId1, accountType, balance, clientId1);
				accounts.add(account);

			}

			return accounts;

		}
	}

	@Override
	public Account editAccount(int idc1, int ida1, AddOrEditAccountDTO accountToEdit) throws SQLException {

		try (Connection con = ConnectionUtility.getConnection()) {

			String sql = "UPDATE project0.account SET account_type = ?, balance = ? WHERE client_id = ? AND account_id = ? ";
			PreparedStatement pstmt = con.prepareStatement(sql);

			pstmt.setString(1, accountToEdit.getAccountType());
			pstmt.setInt(2, accountToEdit.getBalance());
			pstmt.setInt(3, idc1);
			pstmt.setInt(4, ida1);

			int recordsUpdated = pstmt.executeUpdate();
			if (recordsUpdated != 1) {
				throw new SQLException("Record was not able to be updated");

			}

			return new Account(ida1, accountToEdit.getAccountType(), accountToEdit.getBalance(), idc1);
		}
	}

	@Override
	public void deleteAccount(int ida2) throws SQLException {
		try (Connection con = ConnectionUtility.getConnection()) {

			String sql = "DELETE FROM project0.account WHERE account_id = ?";
			PreparedStatement pstmt = con.prepareStatement(sql);

			pstmt.setInt(1, ida2);

			pstmt.executeUpdate();

		}

	}



	@Override
	public List<Account> getAllAccountsInRangeFromClient(int clientId, int lowerEnd, int upperEnd) throws SQLException {

		try (Connection con = ConnectionUtility.getConnection()) {
			List<Account> accounts = new ArrayList<>();

			String sql = "SELECT * FROM project0.account a WHERE a.client_id = ? AND balance BETWEEN ? AND ?";

			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, clientId);
			pstmt.setInt(2, lowerEnd);
			pstmt.setInt(3, upperEnd);

			ResultSet rs = pstmt.executeQuery();

			while (rs.next()) {
				int accountId = rs.getInt("account_id");
				String accountType = rs.getString("account_type");
				int balance = rs.getInt("balance");
				int clientIdFK = rs.getInt("client_id");

				Account a = new Account(accountId, accountType, balance, clientIdFK);
				accounts.add(a);
			}
			return accounts;
		}

	}

	@Override
	public List<Account> getGreaterThanAccounts(int clientId, int lowerEnd) throws SQLException {

		try (Connection con = ConnectionUtility.getConnection()) {
			List<Account> accounts = new ArrayList<>();

			String sql = "SELECT * FROM project0.account a WHERE a.client_id = ? AND balance >= ?";

			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, clientId);
			pstmt.setInt(2, lowerEnd);

			ResultSet rs = pstmt.executeQuery();

			while (rs.next()) {
				int accountId = rs.getInt("account_id");
				String accountType = rs.getString("account_type");
				int balance = rs.getInt("balance");
				int clientIdFK = rs.getInt("client_id");

				Account a = new Account(accountId, accountType, balance, clientIdFK);
				accounts.add(a);
			}
			return accounts;
		}

	}

	@Override
	public List<Account> getLessThanAccounts(int clientId, int upperEnd) throws SQLException {

		try (Connection con = ConnectionUtility.getConnection()) {
			List<Account> accounts = new ArrayList<>();

			String sql = "SELECT * FROM project0.account a WHERE a.client_id = ? AND balance <= ?";

			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, clientId);
			pstmt.setInt(2, upperEnd);

			ResultSet rs = pstmt.executeQuery();

			while (rs.next()) {
				int accountId = rs.getInt("account_id");
				String accountType = rs.getString("account_type");
				int balance = rs.getInt("balance");
				int clientIdFK = rs.getInt("client_id");

				Account a = new Account(accountId, accountType, balance, clientIdFK);
				accounts.add(a);
			}
			return accounts;
		}

	}

}
